package ru.mirea.task14;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChangeChars {

    // –í—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ üí©, –Ω–æ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç ü§ôüèªü§ôüèªü§ôüèª

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<String> list1 = new ArrayList<>();
        Map<String, String> list2 = new HashMap<>();
        int N, j;
        int ind[];
        String rule, word, word1, word2, buffer;

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª: ");
        N = scanner.nextInt();
        ind = new int[N];

        // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ö–æ–¥—É –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ nextLine() –ø–æ—Å–ª–µ nextInt()
        scanner.nextLine();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ");
        for (int i = 0; i < N; i++) {
            rule = scanner.nextLine();
            list1.add(rule);
            /*list.put(scanner.next(), scanner.next());
            System.out.println(list);*/
        }

        //–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª(–ø–æ –≤–∫–ª—é—á–µ–Ω–∏—é –¥—Ä—É–≥–∏—Ö –ø—Ä–∞–≤–∏–ª)
        int check = 0;
        for(int i = 0; i < N; i++){
            for(int k = 0; k < N; k++){
                if(i != k){
                    if(list1.get(i).split(" ")[0].contains(list1.get(k).split(" ")[0])){
                        check ++;
                    }
                }
            }
            ind[i] = check;
            check = 0;
        }


        //–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ –∏—Ö —Ä–∞–∑–º–µ—Ä—É(—Ç.–µ. –ø–æ –≤–∫–ª—é—á–µ–Ω–∏—é –¥—Ä—É–≥–∏—Ö –ø—Ä–∞–≤–∏–ª)
        String sorting = "";
        for(int i = 0; i < N; i++){
            for(int k = 0; k < N; k++){
                if (ind[i] > ind[k]){
                    sorting = list1.get(k);
                    list1.set(k,list1.get(i));
                    list1.set(i, sorting);
                }
            }
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ");
        word = scanner.next();
        word1 = word;
        word2 = word;
        int a = 0;

        // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        /*for (int i = 0; i < N; i++) {
            rule = list.get(i);
            parts = rule.split(" ");
            part1 = parts[0];
            part2 = parts[1];
            word = word.replaceAll(part1, part2);
            System.out.println(word);
        }*/

        // –í—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        /*for (int i = 0; i < N; i++) {
            word = word.replace(list.get(i).split(" ")[0], list.get(i).split(" ")[1]);
            System.out.println(list.get(i).split(" ")[0] + " " +  list.get(i).split(" ")[1]);
            System.out.println(word);
        }*/

        // –¢—Ä–µ—Ç—å—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ü§Ø
        // –ü–æ–º–æ–≥–∏—Ç–µ... –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–æ –¢–ó üò§
        /*for (int i = 0; i < N; i++) {
            Pattern p = Pattern.compile(list.get(i).split(" ")[0]);
            Matcher m = p.matcher(word);
            word = m.replaceAll(list.get(i).split(" ")[1]);
        }
        System.out.println(word);*/


        // Jesus, HELP ME (time 3:02 –Ω–æ—á–∏, –∑–∞—á–µ–º —è —ç—Ç–æ –¥–µ–ª–∞—é...)
        // –û–Ω–æ –æ–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø–æ –¢–ó
        /*for (int i = 0; i < N; i++) {
            ch = new char[list.get(i).split(" ")[0].length()];

            for (int k = 0; k < word.length(); k++) {
                if (list.get(i).split(" ")[0].length() + k < word.length()) {
                    word.getChars(k, list.get(i).split(" ")[0].length() + k, ch, 0);
                    System.out.println(ch);
                    System.out.println(list.get(i).split(" ")[0].toCharArray());

                    if (Arrays.equals(ch, list.get(i).split(" ")[0].toCharArray())) {
                        System.out.println(i);
                        word = word.replace(list.get(i).split(" ")[0], list.get(i).split(" ")[1]);
                        System.out.println(word);
                        i = 0;
                    }
                }
            }
        }*/

        // –û–ù–û –†–ê–ë–û–¢–ê–ï–¢ üò≥ (–Ω–∞–¥–æ –±—ã–ª–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É —á–µ—Ä–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª)
        j = N - 1;
        for (int i = 0; i < N; i++) {
            word1 = word1.replaceAll(list1.get(j).split(" ")[0], list1.get(j).split(" ")[1]);
            j--;
        }
        System.out.println(word1 + " –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");

        // –ó–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        j = N - 1;
        for (int i = 0; i < N; i++) {
            Pattern p = Pattern.compile("(\\w+) (\\w+)");
            Matcher m = p.matcher(list1.get(j));
            if (m.matches()) {
                word2 = word2.replaceAll(m.group(1), m.group(2));
                j--;
            }
        }
        System.out.println(word2 + " –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");

        // –í—Ç–æ—Ä–æ–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        /*StringBuilder resultWithoutRegex = new StringBuilder();
        for (int i = 0; i < word1.length(); i++) {
            boolean flag = false;

            for (String key:list.keySet()) {
                if(i+key.length()<word1.length()) {
                    String subKey = word1.substring(i, i+key.length());
                    if (key.equals(subKey)) {
                        resultWithoutRegex.append(list.get(key));
                        i += key.length() - 1;
                        flag = true;
                        break;
                    }
                }
            }
            if(!flag) resultWithoutRegex.append(word1.charAt(i));
        }
        System.out.println(resultWithoutRegex + " –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");*/


        // –ó–∞–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        /*StringBuilder resultWithRegex = new StringBuilder();
        String[] rules = list.keySet().toArray(new String[0]);
        for (int i = 0; i < rules.length; i++) {
            resultWithRegex.append(rules[i]);
            if(i!=rules.length-1) resultWithRegex.append("|");
        }
        Pattern pat = Pattern.compile(resultWithRegex.toString());
        Matcher match = pat.matcher(word2);
        String result = match.replaceAll(x->list.get(x.group()));

        System.out.println(result + " –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");*/


    }
}