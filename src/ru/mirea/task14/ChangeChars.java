package ru.mirea.task14;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChangeChars {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<String> list = new ArrayList<>();
        String[] parts;
        char[] ch;
        int N, j;
        String rule, word;

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª: ");
        N = scanner.nextInt();

        // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ö–æ–¥—É –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ nextLine() –ø–æ—Å–ª–µ nextInt()
        scanner.nextLine();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ");
        for (int i = 0; i < N; i++) {
            rule = scanner.nextLine();
            list.add(rule);
            System.out.println(list);
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ");
        word = scanner.nextLine();

        // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        /*for (int i = 0; i < N; i++) {
            rule = list.get(i);
            parts = rule.split(" ");
            part1 = parts[0];
            part2 = parts[1];
            word = word.replaceAll(part1, part2);
            System.out.println(word);
        }*/

        // –í—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        /*for (int i = 0; i < N; i++) {
            word = word.replace(list.get(i).split(" ")[0], list.get(i).split(" ")[1]);
            System.out.println(list.get(i).split(" ")[0] + " " +  list.get(i).split(" ")[1]);
            System.out.println(word);
        }*/

        // –¢—Ä–µ—Ç—å—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ü§Ø
        // –ü–æ–º–æ–≥–∏—Ç–µ... –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–æ –¢–ó üò§
        /*for (int i = 0; i < N; i++) {
            Pattern p = Pattern.compile(list.get(i).split(" ")[0]);
            Matcher m = p.matcher(word);
            word = m.replaceAll(list.get(i).split(" ")[1]);
        }
        System.out.println(word);*/


        // Jesus, HELP ME (time 3:02 –Ω–æ—á–∏, –∑–∞—á–µ–º —è —ç—Ç–æ –¥–µ–ª–∞—é...)
        // –û–Ω–æ –æ–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø–æ –¢–ó
        /*for (int i = 0; i < N; i++) {
            ch = new char[list.get(i).split(" ")[0].length()];

            for (int k = 0; k < word.length(); k++) {
                if (list.get(i).split(" ")[0].length() + k < word.length()) {
                    word.getChars(k, list.get(i).split(" ")[0].length() + k, ch, 0);
                    System.out.println(ch);
                    System.out.println(list.get(i).split(" ")[0].toCharArray());

                    if (Arrays.equals(ch, list.get(i).split(" ")[0].toCharArray())) {
                        System.out.println(i);
                        word = word.replace(list.get(i).split(" ")[0], list.get(i).split(" ")[1]);
                        System.out.println(word);
                        i = 0;
                    }
                }
            }
        }*/

        // –û–ù–û –†–ê–ë–û–¢–ê–ï–¢ (–Ω–∞–¥–æ –±—ã–ª–æ –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É —á–µ—Ä–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª)
        j = N-1;
        for (int i = 0; i < N; i++) {
            word = word.replace(list.get(j).split(" ")[0], list.get(j).split(" ")[1]);
            j--;
        }

        System.out.println(word);

    }
}